scalar Time

type Account{
id: String!
name:String!
orders[order!]!
}

type Product{
id: String!
name:String!
description:String!
price:Float!
}

type Order{
id: String!
createdAt: Time!
totalPrice:Float!
products:[OrderProduct!]!
}

type OrderProduct{
id:String!
name:String!
description:String!
price:Float!
quantity:Int!
}

input PaginationInput{
skip:Int
take:Int
}

input ProductInput{
name:String!
description:String!
price:Float!
}

input OrderProductInput{
id:String!
quantity:Int!
}

input OrderInput{
accountId:String!
products:[OrderProductInput!]!
}


type Mutation {
    createAccount(account:AccountInput!):Account
    createProduct(product:ProductInput!):Product
    createOrder(order:OrderInput!):Order
}
type Query {
    accounts(pagination:PaginationInput, id:String): [Account!]!
    products(pagination:PaginationInput, id:String): [Product!]!
    orders(pagination:PaginationInput, id:String): [Order!]!
}
type Subscription {
    accounts(pagination:PaginationInput, id:String): [Account!]!
    products(pagination:PaginationInput, id:String): [Product!]!    
}

